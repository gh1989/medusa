#ifndef board_h
#define board_h

#include <sstream>

#include "bitboard.h"
#include "move.h"
#include "types.h"

namespace medusa
{
	enum Piece { KNIGHT, BISHOP, ROOK, QUEEN, KING, PAWN, NUMBER_PIECES, NO_PIECE = -1 };

	enum Castling {
		W_QUEENSIDE = 1,
		W_KINGSIDE = 2,
		B_QUEENSIDE = 4,
		B_KINGSIDE = 8,
		ALL = 15
	};

	enum Square
	{
		a1 = 0, b1, c1, d1, e1, f1, g1, h1,
		a2, b2, c2, d2, e2, f2, g2, h2,
		a3, b3, c3, d3, e3, f3, g3, h3,
		a4, b4, c4, d4, e4, f4, g4, h4,
		a5, b5, c5, d5, e5, f5, g5, h5,
		a6, b6, c6, d6, e6, f6, g6, h6,
		a7, b7, c7, d7, e7, f7, g7, h7,
		a8, b8, c8, d8, e8, f8, g8, h8,
	};

	// Source of move
	Square from(Move move);
	// Destination of move
	Square to(Move move);
	// Type of special move
	SpecialMove special_move(Move move);
	// Promotion piece of move
	Piece promotion_piece(Move move);
	// Move as uci string
	std::string as_uci(Move move);
	// Reflect move
	Move reflect_move(Move move);
	// Create move
	Move create_move(Square from, Square to);
	// Create promotion move
	Move create_promotion(Square from, Square to, Piece promo);
	// Create en passasnt move
	Move create_en_passant(Square from, Square to);
	// Create castle move
	Move create_castle(Square from, Square to);

	// Attack functions
	// ----------------
    // Neighbours, or king attacks.
	static const Bitboard neighbours[64] = {
		0x0000000000000302ULL,	0x0000000000000705ULL,	0x0000000000000e0aULL, 0x0000000000001c14ULL,
		0x0000000000003828ULL,	0x0000000000007050ULL,  0x000000000000e0a0ULL, 0x000000000000c040ULL,
		0x0000000000030203ULL,  0x0000000000070507ULL,	0x00000000000e0a0eULL, 0x00000000001c141cULL,
		0x0000000000382838ULL,	0x0000000000705070ULL,	0x0000000000e0a0e0ULL, 0x0000000000c040c0ULL,
		0x0000000003020300ULL,	0x0000000007050700ULL,  0x000000000e0a0e00ULL, 0x000000001c141c00ULL,
		0x0000000038283800ULL, 	0x0000000070507000ULL,	0x00000000e0a0e000ULL, 0x00000000c040c000ULL, 
		0x0000000302030000ULL,	0x0000000705070000ULL,	0x0000000e0a0e0000ULL, 0x0000001c141c0000ULL,	
		0x0000003828380000ULL,	0x0000007050700000ULL,  0x000000e0a0e00000ULL, 0x000000c040c00000ULL,	
		0x0000030203000000ULL, 	0x0000070507000000ULL,	0x00000e0a0e000000ULL, 0x00001c141c000000ULL, 
		0x0000382838000000ULL,	0x0000705070000000ULL,	0x0000e0a0e0000000ULL, 0x0000c040c0000000ULL,
		0x0003020300000000ULL,	0x0007050700000000ULL,  0x000e0a0e00000000ULL, 0x001c141c00000000ULL,	
		0x0038283800000000ULL, 	0x0070507000000000ULL,	0x00e0a0e000000000ULL, 0x00c040c000000000ULL, 
		0x0302030000000000ULL,	0x0705070000000000ULL,	0x0e0a0e0000000000ULL, 0x1c141c0000000000ULL,	
		0x3828380000000000ULL,	0x7050700000000000ULL,  0xe0a0e00000000000ULL, 0xc040c00000000000ULL,
		0x0203000000000000ULL,  0x0507000000000000ULL,	0x0a0e000000000000ULL, 0x141c000000000000ULL,
		0x2838000000000000ULL,	0x5070000000000000ULL,	0xa0e0000000000000ULL, 0x40c0000000000000ULL };

	// Rook attack bitboards.
	static const Bitboard rook_attacks[64] = {
		0x01010101010101FEULL, 0x02020202020202FDULL, 0x04040404040404FBULL,
		0x08080808080808F7ULL, 0x10101010101010EFULL, 0x20202020202020DFULL,
		0x40404040404040BFULL, 0x808080808080807FULL, 0x010101010101FE01ULL,
		0x020202020202FD02ULL, 0x040404040404FB04ULL, 0x080808080808F708ULL,
		0x101010101010EF10ULL, 0x202020202020DF20ULL, 0x404040404040BF40ULL,
		0x8080808080807F80ULL, 0x0101010101FE0101ULL, 0x0202020202FD0202ULL,
		0x0404040404FB0404ULL, 0x0808080808F70808ULL, 0x1010101010EF1010ULL,
		0x2020202020DF2020ULL, 0x4040404040BF4040ULL, 0x80808080807F8080ULL,
		0x01010101FE010101ULL, 0x02020202FD020202ULL, 0x04040404FB040404ULL,
		0x08080808F7080808ULL, 0x10101010EF101010ULL, 0x20202020DF202020ULL,
		0x40404040BF404040ULL, 0x808080807F808080ULL, 0x010101FE01010101ULL,
		0x020202FD02020202ULL, 0x040404FB04040404ULL, 0x080808F708080808ULL,
		0x101010EF10101010ULL, 0x202020DF20202020ULL, 0x404040BF40404040ULL,
		0x8080807F80808080ULL, 0x0101FE0101010101ULL, 0x0202FD0202020202ULL,
		0x0404FB0404040404ULL, 0x0808F70808080808ULL, 0x1010EF1010101010ULL,
		0x2020DF2020202020ULL, 0x4040BF4040404040ULL, 0x80807F8080808080ULL,
		0x01FE010101010101ULL, 0x02FD020202020202ULL, 0x04FB040404040404ULL,
		0x08F7080808080808ULL, 0x10EF101010101010ULL, 0x20DF202020202020ULL,
		0x40BF404040404040ULL, 0x807F808080808080ULL, 0xFE01010101010101ULL,
		0xFD02020202020202ULL, 0xFB04040404040404ULL, 0xF708080808080808ULL,
		0xEF10101010101010ULL, 0xDF20202020202020ULL, 0xBF40404040404040ULL,
		0x7F80808080808080ULL };

	// Bishop attack bitboards.
	static const Bitboard bishop_attacks[64] = {
		0x8040201008040200ULL, 0x0080402010080500ULL, 0x0000804020110A00ULL,
		0x0000008041221400ULL, 0x0000000182442800ULL, 0x0000010204885000ULL,
		0x000102040810A000ULL, 0x0102040810204000ULL, 0x4020100804020002ULL,
		0x8040201008050005ULL, 0x00804020110A000AULL, 0x0000804122140014ULL,
		0x0000018244280028ULL, 0x0001020488500050ULL, 0x0102040810A000A0ULL,
		0x0204081020400040ULL, 0x2010080402000204ULL, 0x4020100805000508ULL,
		0x804020110A000A11ULL, 0x0080412214001422ULL, 0x0001824428002844ULL,
		0x0102048850005088ULL, 0x02040810A000A010ULL, 0x0408102040004020ULL,
		0x1008040200020408ULL, 0x2010080500050810ULL, 0x4020110A000A1120ULL,
		0x8041221400142241ULL, 0x0182442800284482ULL, 0x0204885000508804ULL,
		0x040810A000A01008ULL, 0x0810204000402010ULL, 0x0804020002040810ULL,
		0x1008050005081020ULL, 0x20110A000A112040ULL, 0x4122140014224180ULL,
		0x8244280028448201ULL, 0x0488500050880402ULL, 0x0810A000A0100804ULL,
		0x1020400040201008ULL, 0x0402000204081020ULL, 0x0805000508102040ULL,
		0x110A000A11204080ULL, 0x2214001422418000ULL, 0x4428002844820100ULL,
		0x8850005088040201ULL, 0x10A000A010080402ULL, 0x2040004020100804ULL,
		0x0200020408102040ULL, 0x0500050810204080ULL, 0x0A000A1120408000ULL,
		0x1400142241800000ULL, 0x2800284482010000ULL, 0x5000508804020100ULL,
		0xA000A01008040201ULL, 0x4000402010080402ULL, 0x0002040810204080ULL,
		0x0005081020408000ULL, 0x000A112040800000ULL, 0x0014224180000000ULL,
		0x0028448201000000ULL, 0x0050880402010000ULL, 0x00A0100804020100ULL,
		0x0040201008040201ULL };

	// Knight attack bitboards
	static const Bitboard knight_attacks[64] = {
		0x0000000000020400ULL, 0x0000000000050800ULL, 0x00000000000A1100ULL,
		0x0000000000142200ULL, 0x0000000000284400ULL, 0x0000000000508800ULL,
		0x0000000000A01000ULL, 0x0000000000402000ULL, 0x0000000002040004ULL,
		0x0000000005080008ULL, 0x000000000A110011ULL, 0x0000000014220022ULL,
		0x0000000028440044ULL, 0x0000000050880088ULL, 0x00000000A0100010ULL,
		0x0000000040200020ULL, 0x0000000204000402ULL, 0x0000000508000805ULL,
		0x0000000A1100110AULL, 0x0000001422002214ULL, 0x0000002844004428ULL,
		0x0000005088008850ULL, 0x000000A0100010A0ULL, 0x0000004020002040ULL,
		0x0000020400040200ULL, 0x0000050800080500ULL, 0x00000A1100110A00ULL,
		0x0000142200221400ULL, 0x0000284400442800ULL, 0x0000508800885000ULL,
		0x0000A0100010A000ULL, 0x0000402000204000ULL, 0x0002040004020000ULL,
		0x0005080008050000ULL, 0x000A1100110A0000ULL, 0x0014220022140000ULL,
		0x0028440044280000ULL, 0x0050880088500000ULL, 0x00A0100010A00000ULL,
		0x0040200020400000ULL, 0x0204000402000000ULL, 0x0508000805000000ULL,
		0x0A1100110A000000ULL, 0x1422002214000000ULL, 0x2844004428000000ULL,
		0x5088008850000000ULL, 0xA0100010A0000000ULL, 0x4020002040000000ULL,
		0x0400040200000000ULL, 0x0800080500000000ULL, 0x1100110A00000000ULL,
		0x2200221400000000ULL, 0x4400442800000000ULL, 0x8800885000000000ULL,
		0x100010A000000000ULL, 0x2000204000000000ULL, 0x0004020000000000ULL,
		0x0008050000000000ULL, 0x00110A0000000000ULL, 0x0022140000000000ULL,
		0x0044280000000000ULL, 0x0088500000000000ULL, 0x0010A00000000000ULL,
		0x0020400000000000ULL };

	// Pawn attack bitboards (white)
	static const Bitboard pawn_attacks[64] = {
		0x0000000000000200ULL,  0x0000000000000500ULL,  0x0000000000000A00ULL,  0x0000000000001400ULL, 
		0x0000000000002800ULL,  0x0000000000005000ULL,  0x000000000000A000ULL,  0x0000000000004000ULL, 
		0x0000000000020000ULL,  0x0000000000050000ULL,  0x00000000000A0000ULL,  0x0000000000140000ULL,
		0x0000000000280000ULL,  0x0000000000500000ULL,  0x0000000000A00000ULL,  0x0000000000400000ULL,
		0x0000000002000000ULL,  0x0000000005000000ULL,  0x000000000A000000ULL,  0x0000000014000000ULL,
		0x0000000028000000ULL,  0x0000000050000000ULL,  0x00000000A0000000ULL,  0x0000000040000000ULL,
		0x0000000200000000ULL,  0x0000000500000000ULL,  0x0000000A00000000ULL,  0x0000001400000000ULL,
		0x0000002800000000ULL,  0x0000005000000000ULL,  0x000000A000000000ULL,  0x0000004000000000ULL, 
		0x0000020000000000ULL,  0x0000050000000000ULL,  0x00000A0000000000ULL,  0x0000140000000000ULL,
		0x0000280000000000ULL,  0x0000500000000000ULL,  0x0000A00000000000ULL,  0x0000400000000000ULL, 
		0x0002000000000000ULL,  0x0005000000000000ULL,  0x000A000000000000ULL,  0x0014000000000000ULL, 
		0x0028000000000000ULL,  0x0050000000000000ULL,  0x00A0000000000000ULL,  0x0040000000000000ULL,
		0x0200000000000000ULL,  0x0500000000000000ULL,  0x0A00000000000000ULL,  0x1400000000000000ULL,
		0x2800000000000000ULL,  0x5000000000000000ULL,  0xA000000000000000ULL,  0x4000000000000000ULL,
		0x0000000000000000ULL,  0x0000000000000000ULL,  0x0000000000000000ULL,  0x0000000000000000ULL,
		0x0000000000000000ULL,  0x0000000000000000ULL,  0x0000000000000000ULL,  0x0000000000000000ULL };
  
	// File bitboards
	static const Bitboard files[8] = {
		0x0101010101010101ULL,
		0x0202020202020202ULL,
		0x0404040404040404ULL,
		0x0808080808080808ULL,
		0x1010101010101010ULL,
		0x2020202020202020ULL,
		0x4040404040404040ULL,
		0x8080808080808080ULL };

	// Rank bitboards
	static const Bitboard ranks[8] = {
		0x00000000000000FFULL,
		0x000000000000FF00ULL,
		0x0000000000FF0000ULL,
		0x00000000FF000000ULL,
		0x000000FF00000000ULL,
		0x0000FF0000000000ULL,
		0x00FF000000000000ULL,
		0xFF00000000000000ULL };

	// Square bitboards
	static const Bitboard squares[64] = {
		0x0000000000000001ULL,	0x0000000000000002ULL,	0x0000000000000004ULL,  0x0000000000000008ULL,	
		0x0000000000000010ULL,	0x0000000000000020ULL,	0x0000000000000040ULL,	0x0000000000000080ULL,	
		0x0000000000000100ULL,  0x0000000000000200ULL,	0x0000000000000400ULL,	0x0000000000000800ULL,
		0x0000000000001000ULL,	0x0000000000002000ULL,	0x0000000000004000ULL,  0x0000000000008000ULL,	
		0x0000000000010000ULL,	0x0000000000020000ULL, 	0x0000000000040000ULL,  0x0000000000080000ULL,
		0x0000000000100000ULL,  0x0000000000200000ULL,	0x0000000000400000ULL,	0x0000000000800000ULL,
		0x0000000001000000ULL,	0x0000000002000000ULL,	0x0000000004000000ULL,  0x0000000008000000ULL, 
		0x0000000010000000ULL,	0x0000000020000000ULL,	0x0000000040000000ULL,  0x0000000080000000ULL,	
		0x0000000100000000ULL,  0x0000000200000000ULL,	0x0000000400000000ULL,	0x0000000800000000ULL,
		0x0000001000000000ULL,	0x0000002000000000ULL,	0x0000004000000000ULL,  0x0000008000000000ULL,	
		0x0000010000000000ULL,	0x0000020000000000ULL,	0x0000040000000000ULL,  0x0000080000000000ULL,	
		0x0000100000000000ULL,  0x0000200000000000ULL,	0x0000400000000000ULL,	0x0000800000000000ULL,
		0x0001000000000000ULL,	0x0002000000000000ULL,	0x0004000000000000ULL,  0x0008000000000000ULL,
		0x0010000000000000ULL,	0x0020000000000000ULL,	0x0040000000000000ULL,	0x0080000000000000ULL,	
		0x0100000000000000ULL,  0x0200000000000000ULL,	0x0400000000000000ULL,	0x0800000000000000ULL,
		0x1000000000000000ULL,	0x2000000000000000ULL,	0x4000000000000000ULL,  0x8000000000000000ULL 
	};

	static const Bitboard diagonals[64] = {
		0x8040201008040200ULL,  0x0080402010080400ULL,  0x0000804020100800ULL,  0x0000008040201000ULL,
		0x0000000080402000ULL,  0x0000000000804000ULL,  0x0000000000008000ULL,  0x0000000000000000ULL,
		0x4020100804020000ULL,  0x8040201008040001ULL,  0x0080402010080002ULL,  0x0000804020100004ULL,
		0x0000008040200008ULL,  0x0000000080400010ULL,  0x0000000000800020ULL,  0x0000000000000040ULL,
		0x2010080402000000ULL,  0x4020100804000100ULL,  0x8040201008000201ULL,  0x0080402010000402ULL,
		0x0000804020000804ULL,  0x0000008040001008ULL,  0x0000000080002010ULL,  0x0000000000004020ULL,
		0x1008040200000000ULL,  0x2010080400010000ULL,  0x4020100800020100ULL,  0x8040201000040201ULL,
		0x0080402000080402ULL,  0x0000804000100804ULL,  0x0000008000201008ULL,  0x0000000000402010ULL,
		0x0804020000000000ULL,  0x1008040001000000ULL,  0x2010080002010000ULL,  0x4020100004020100ULL,
		0x8040200008040201ULL,  0x0080400010080402ULL,  0x0000800020100804ULL,  0x0000000040201008ULL,
		0x0402000000000000ULL,  0x0804000100000000ULL,  0x1008000201000000ULL,  0x2010000402010000ULL,
		0x4020000804020100ULL,  0x8040001008040201ULL,  0x0080002010080402ULL,  0x0000004020100804ULL,
		0x0200000000000000ULL,  0x0400010000000000ULL,  0x0800020100000000ULL,  0x1000040201000000ULL,
		0x2000080402010000ULL,  0x4000100804020100ULL,  0x8000201008040201ULL,  0x0000402010080402ULL,
		0x0000000000000000ULL,  0x0001000000000000ULL,  0x0002010000000000ULL,  0x0004020100000000ULL,
		0x0008040201000000ULL,  0x0010080402010000ULL,  0x0020100804020100ULL,  0x0040201008040201ULL,
	};

	static const Bitboard antidiagonals[64] = {
		0x0000000000000000ULL,  0x0000000000000100ULL,  0x0000000000010200ULL,  0x0000000001020400ULL,
		0x0000000102040800ULL,  0x0000010204081000ULL,  0x0001020408102000ULL,  0x0102040810204000ULL,
		0x0000000000000002ULL,  0x0000000000010004ULL,  0x0000000001020008ULL,  0x0000000102040010ULL,
		0x0000010204080020ULL,  0x0001020408100040ULL,  0x0102040810200080ULL,  0x0204081020400000ULL,
		0x0000000000000204ULL,  0x0000000001000408ULL,  0x0000000102000810ULL,  0x0000010204001020ULL,
		0x0001020408002040ULL,  0x0102040810004080ULL,  0x0204081020008000ULL,  0x0408102040000000ULL,
		0x0000000000020408ULL,  0x0000000100040810ULL,  0x0000010200081020ULL,  0x0001020400102040ULL,
		0x0102040800204080ULL,  0x0204081000408000ULL,  0x0408102000800000ULL,  0x0810204000000000ULL,
		0x0000000002040810ULL,  0x0000010004081020ULL,  0x0001020008102040ULL,  0x0102040010204080ULL,
		0x0204080020408000ULL,  0x0408100040800000ULL,  0x0810200080000000ULL,  0x1020400000000000ULL,
		0x0000000204081020ULL,  0x0001000408102040ULL,  0x0102000810204080ULL,  0x0204001020408000ULL,
		0x0408002040800000ULL,  0x0810004080000000ULL,  0x1020008000000000ULL,  0x2040000000000000ULL,
		0x0000020408102040ULL,  0x0100040810204080ULL,  0x0200081020408000ULL,  0x0400102040800000ULL,
		0x0800204080000000ULL,  0x1000408000000000ULL,  0x2000800000000000ULL,  0x4000000000000000ULL,
		0x0002040810204080ULL,  0x0004081020408000ULL,  0x0008102040800000ULL,  0x0010204080000000ULL,
		0x0020408000000000ULL,  0x0040800000000000ULL,  0x0080000000000000ULL,  0x0000000000000000ULL,
	};
	
	// Directions the rook can move
	static const std::pair<int, int> rook_directions[4] =
	{
		{1, 0}, {-1, 0}, {0, 1}, {0, -1}
	};
	// Directions the bishop can move
	static const std::pair<int, int> bishop_directions[4] =
	{
		{1, 1}, {-1, 1}, {1, -1}, {-1, -1}
	};
	// King castling path
	static const Bitboard king_castle_route = 0x60ULL;
	// Queenside castling path
	static const Bitboard queenside_castle_route = 0xcULL;

	Bitboard direction_attacks(Bitboard occupants, Square sqr, 
								const std::pair<int, int> *directions);
	
	static const std::string start_pos_fen = "";

	// Useful parts of the board
	// -------------------------
	// The outer rim
	const Bitboard BB_RIM = 0xff818181818181ff;
	// The central files
	const Bitboard BB_CTR = 0X383c3c3c3c3c3c38;
	// The centre of the board
	const Bitboard BB_CTR_SQR = 0x3c3c000000;

	// Square functions
	// ---------------
	// Move a square
	Bitboard bit_move(Bitboard bb, Square from, Square to);
	// Check if a square is on 
	bool is_on(Bitboard bb, Square square);
	// Turn a square off
	Bitboard off_bit(Bitboard bb, Square off);
	// Turn a square on
	Bitboard on_bit(Bitboard bb, Square on);
	// Convert bitboard to square
	Square bbsqr(Bitboard bb);
	// Convert square to bitboard
	Bitboard sqrbb(Square sqr);
	// Reflect a square
	Square reflect(Square sqr);
	// Get square name as string
	std::string square_name(Square sqr);

	// Variadic template way of getting several squares
	// Get square
	Bitboard get_sq(medusa::Square sqr);

	// Get square(s)
	template<typename Square, typename... SqArgs>
	static Bitboard get_sq(Square sqr, SqArgs... others)
	{
		return get_sq(sqr) | get_sq(others...);
	}

	// Board geometry functions	
	// ------------------------
	// Reflect bitboard
	Bitboard reflect(Bitboard bb);
	
};

#endif